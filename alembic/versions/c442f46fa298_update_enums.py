"""update_enums

Revision ID: c442f46fa298
Revises: 3e1c63916599
Create Date: 2024-10-23 19:37:42.144624

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# ### MANUALLY IMPORTED ########
from enum import Enum as PyEnum

################################


# ### MANUALLY CREATING ENUMS #####
class OldUserRole(PyEnum):
    ADMIN = "admin"
    USER = "user"
    WAITING = "waiting for approval"


class UserRole(PyEnum):
    ADMIN = "admin"
    EDITOR = "editor"
    ESPERANDO_APROVACAO = "esperando aprovacao"


old_user_role_enum = sa.Enum(OldUserRole, name="userrole")
user_role_enum = sa.Enum(UserRole, name="userrole")


class SectionName(PyEnum):
    PATOGENO = "patogeno"
    TRANSMISSOR = "transmissor"
    PREVENCAO = "prevencao"
    DADOS = "dados"
    TRATAMENTO = "tratamento"


section_name_enum = sa.Enum(SectionName, name="sectionname")

#################################


# revision identifiers, used by Alembic.
revision: str = "c442f46fa298"
down_revision: Union[str, None] = "3e1c63916599"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### MANUALLY UPDATE USER ROLE ###

    op.alter_column(
        "users",
        "role",
        existing_type=old_user_role_enum,
        type_=sa.VARCHAR(),
        postgresql_using="role::varchar",
        existing_nullable=False,
    )

    old_user_role_enum.drop(op.get_bind(), checkfirst=False)
    user_role_enum.create(op.get_bind(), checkfirst=False)

    op.alter_column(
        "users",
        "role",
        existing_type=sa.VARCHAR(),
        type_=user_role_enum,
        postgresql_using="role::userrole",
        existing_nullable=False,
    )

    ####################################

    # ### MANUALLY CREATE SECTION NAME ENUM ###

    section_name_enum.create(op.get_bind())

    op.alter_column(
        "sections",
        "name",
        existing_type=sa.VARCHAR(),
        type_=section_name_enum,
        postgresql_using="name::sectionname",
        existing_nullable=False,
    )
    op.alter_column(
        "versions",
        "section",
        existing_type=sa.VARCHAR(),
        type_=section_name_enum,
        postgresql_using="section::sectionname",
        existing_nullable=True,
    )

    ####################################


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "versions",
        "section",
        existing_type=section_name_enum,
        type_=sa.VARCHAR(),
        postgresql_using="section::varchar",
        existing_nullable=True,
    )
    op.alter_column(
        "sections",
        "name",
        existing_type=section_name_enum,
        type_=sa.VARCHAR(),
        postgresql_using="name::varchar",
        existing_nullable=False,
    )
    # ### end Alembic commands ###

    # ### MANUALLY DOWNGRADE USER ROLE ###

    op.alter_column(
        "users",
        "role",
        existing_type=user_role_enum,
        type_=sa.VARCHAR(),
        postgresql_using="role::varchar",
        existing_nullable=False,
    )

    user_role_enum.drop(op.get_bind())
    old_user_role_enum.create(op.get_bind())

    op.alter_column(
        "users",
        "role",
        existing_type=sa.VARCHAR(),
        type_=old_user_role_enum,
        postgresql_using="role::userrole",
        existing_nullable=False,
    )

    # ### MANUALLY DROP SECTION NAME ENUM ###
    section_name_enum.drop(op.get_bind())
